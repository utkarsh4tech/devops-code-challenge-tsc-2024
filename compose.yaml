services:

  server:
    container_name: backend
    restart: always
    # image: utkarsh4tech/cern_tsc_server:v1
    build:
      context: .
    expose:
      - "8000"
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: cern_restaurant 
      DB_USERNAME: tech_user
      DB_PASSWORD: postgres
      SECRET_KEY: "MIICXAIBAAKBgQCI7C7JVxC3ZI6fEkjmB/ZulI4AdCjO0eoQOy9g07gCTWJ"
    volumes:
    - ./server/:/app/server
    depends_on:
      db:
        condition: service_healthy

  client:
    container_name: frontend
    image: utkarsh4tech/cern_tsc_client:v1
    expose:
      - "5000"
    environment:
      CERN_RESTAURANT_CLIENT_PREFIX: client 
      CERN_RESTAURANT_CLIENT_PORT: 5000
      VITE_BACKEND_URL: http://localhost:8080/api/
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: db
    restart: always
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: cern_restaurant
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: tech_user
    volumes:
    - ./database/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 5s

  nginx-proxy:
    image: nginx:latest
    container_name: proxy
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - server
      - client