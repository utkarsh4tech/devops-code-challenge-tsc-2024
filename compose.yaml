services:

  server:
    container_name: backend
    restart: always
    image: utkarsh4tech/cern_tsc_server:v3
    expose:
      - "8000"
    environment:
      DB_HOST: $DB_HOST # db
      DB_PORT: $DB_PORT  # 5432
      DB_DATABASE: $DB_DATABASE # cern_restaurant 
      DB_USERNAME: $DB_USERNAME # tech_user
      DB_PASSWORD: $DB_PASSWORD # postgres
      SECRET_KEY: $SECRET_KEY #"MIICXAIBAAKBgQCI7C7JVxC3ZI6fEkjmB/ZulI4AdCjO0eoQOy9g07gCTWJ"
    volumes:
    - ./server/:/app/server
    depends_on:
      db:
        condition: service_healthy
    networks:
    - my-network

  client:
    container_name: frontend
    image: utkarsh4tech/cern_tsc_client:v2
    expose:
      - $CERN_RESTAURANT_CLIENT_PORT
    environment:
      CERN_RESTAURANT_CLIENT_PREFIX: $CERN_RESTAURANT_CLIENT_PREFIX # client 
      CERN_RESTAURANT_CLIENT_PORT: $CERN_RESTAURANT_CLIENT_PORT # 5000
      VITE_BACKEND_URL:  $VITE_BACKEND_URL # https://localhost:5050/api/
    volumes:
    - ./client/:/app/
    - /app/node_modules/
    depends_on:
      db:
        condition: service_healthy
    networks:
    - my-network

  db:
    container_name: db
    restart: always
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: $DB_DATABASE
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_USER: $DB_USERNAME
    volumes:
    - ./database/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    - ./database/db_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
    - my-network

  nginx-proxy:
    image: nginx:latest
    container_name: proxy
    ports:
      - "8080:80"
      - "5050:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./development-certs:/etc/nginx/certs
    depends_on:
      - server
      - client
    networks:
    - my-network

networks:
  my-network:
    driver: bridge